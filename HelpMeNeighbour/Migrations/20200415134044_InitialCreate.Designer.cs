// <auto-generated />
using System;
using HelpMeNeighbour.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HelpMeNeighbour.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200415134044_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("HelpMeNeighbour.Entities.Ad", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Adress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Bonus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Picture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Ad");
                });

            modelBuilder.Entity("HelpMeNeighbour.Entities.AdCategory", b =>
                {
                    b.Property<string>("IdAd")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("IdCategory")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("IdAd", "IdCategory");

                    b.HasIndex("IdCategory");

                    b.ToTable("AdCategory");
                });

            modelBuilder.Entity("HelpMeNeighbour.Entities.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("HelpMeNeighbour.Entities.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("AdId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("AuthorId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("IdAd")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("IdAuthor")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("SendedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AdId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("HelpMeNeighbour.Entities.Review", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("IdReviewed")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("IdReviewer")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("IdReviewed");

                    b.HasIndex("IdReviewer");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("HelpMeNeighbour.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Adress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Salt")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("State")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ZipCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("HelpMeNeighbour.Entities.AdCategory", b =>
                {
                    b.HasOne("HelpMeNeighbour.Entities.Ad", "Ad")
                        .WithMany("AdCategories")
                        .HasForeignKey("IdAd")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HelpMeNeighbour.Entities.Category", "Category")
                        .WithMany("AdCategories")
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HelpMeNeighbour.Entities.Message", b =>
                {
                    b.HasOne("HelpMeNeighbour.Entities.Ad", "Ad")
                        .WithMany("Messages")
                        .HasForeignKey("AdId");

                    b.HasOne("HelpMeNeighbour.Entities.User", "Author")
                        .WithMany("Messages")
                        .HasForeignKey("AuthorId");
                });

            modelBuilder.Entity("HelpMeNeighbour.Entities.Review", b =>
                {
                    b.HasOne("HelpMeNeighbour.Entities.User", "Reviewed")
                        .WithMany("Reviews")
                        .HasForeignKey("IdReviewed");

                    b.HasOne("HelpMeNeighbour.Entities.User", "Reviewer")
                        .WithMany("CreatedReviews")
                        .HasForeignKey("IdReviewer");
                });
#pragma warning restore 612, 618
        }
    }
}
